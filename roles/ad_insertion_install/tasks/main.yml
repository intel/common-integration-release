---
- name: install dependencies
  include_role:
    name: install_dependencies

#version installed by ansible_pkg_mgr through install_dependencies is too old
- name: install pexpect
  pip:
    name: "{{ pexpect_package }}"
    state: present

- name: clone Ad-Insertion repository
  git:
    repo: "{{ ad_insertion_git_url }}"
    dest: "{{ ad_insertion_dir }}"
    version: "{{ ad_insertion_version }}"
    force: true

- name: create Ad-Insertion build directory
  file:
    path: "{{ ad_insertion_dir }}/build"
    state: directory

- name: update docker image build user
  replace:
    path: "{{ ad_insertion_dir }}/script/build.sh"
    regexp: "(.*)--build-arg(.*)"
    replace: "\\1--build-arg USER={{ ad_insertion_user }} --build-arg\\2"

- name: patch docker build TTY cmd line args (SSH WORKAROUND)
  replace:
    path: "{{ ad_insertion_dir }}/script/build.sh"
    regexp: "(.*)-t(.*)$"
    replace: "\\1--progress=plain -t\\2"
  when: disable_docker_tty

- name: patch docker run/exec TTY cmd line args (SSH WORKAROUND)
  replace:
    path: "{{ ad_insertion_dir }}/script/shell.sh"
    regexp: "(.*)-it(.*)$"
    replace: "\\1-i\\2"
  when: disable_docker_tty

- name: Remove kubectl on worker node(only with openness) as adi build will fail if it exists on worker node
  file:
    path: /usr/bin/kubectl
    state: absent
  when:
    - openness_enabled
    - (inventory_hostname in groups['edgenode_vca_group']) or (inventory_hostname in groups['edgenode_group'])

- debug:
    msg: "cmake -DPLATFORM={{ adi_platform }} -DNTRANSCODES={{ adi_num_transcodes }} -DNANALYTICS={{ adi_num_analytics }} -DFRAMEWORK={{ adi_framework }} -DMINRESOLUTION={{ adi_resolution }} -DNETWORK={{ adi_model_network }} {{ ad_insertion_dir }}"

- name: configure Ad-Insertion makefiles
  command: "cmake -DPLATFORM={{ adi_platform }} -DNTRANSCODES={{ adi_num_transcodes }} -DNANALYTICS={{ adi_num_analytics }} -DFRAMEWORK={{ adi_framework }} -DMINRESOLUTION={{ adi_resolution }} -DNETWORK={{ adi_model_network }} {{ ad_insertion_dir }}"
  args:
    chdir: "{{ ad_insertion_dir }}/build"
  changed_when: True

- name: build ad_insertion images
  make:
    chdir: "{{ ad_insertion_dir }}/build"

- name: update service-node-port-range in /etc/kubernetes/manifests/kube-apiserver.yaml
  lineinfile:
    dest: /etc/kubernetes/manifests/kube-apiserver.yaml
    regexp: '    - --service-node-port-range=(.*-)(.*)'
    line: '    - --service-node-port-range={{ ad_insertion_service_node_port_range }}'
    state: present
  when:
    - inventory_hostname == (k8s_master)
    - not openness_enabled

- name: restart kubelet service
  service:
    name: kubelet
    state: restarted
  when:
    - inventory_hostname == (k8s_master)

- name: sleep for 30 seconds to allow kubelet time to restart
  wait_for:
    timeout: 30
  delegate_to: localhost

- name: check master ssh key status
  shell: ls |grep ^id_rsa.pub$ |wc -l
  args:
    chdir: /root/.ssh
    executable: /bin/bash
  register: master_key_status
  when:
    - inventory_hostname == (k8s_master)

- name: generate master ssh key pair if not exists
  user:
    name: root
    generate_ssh_key: yes
    ssh_key_type: rsa
    ssh_key_file: "/root/.ssh/id_rsa"
  when:
    - inventory_hostname == (k8s_master)
    - master_key_status.stdout |int == 0

- name: get master key value
  command: "cat id_rsa.pub"
  args:
    chdir: /root/.ssh
  register: master_key_value_tmp
  when:
    - inventory_hostname == (k8s_master)

- name: register and format new vars for all nodes (BMRA)
  set_fact:
    master_key_value: "{{ hostvars[groups['kube-master'][0]]['master_key_value_tmp']['stdout'] }}"
  when: not openness_enabled

- name: register and format new vars for all nodes (openness)
  set_fact:
    master_key_value: "{{ hostvars[groups['controller_group'][0]]['master_key_value_tmp']['stdout'] }}"
  when: openness_enabled

- name: append master ssh-key-pub into  authorized_keys for all (kube-node)s
  authorized_key:
    user: root
    state: present
    key: "{{ master_key_value }}"
  when:
    - inventory_hostname in groups['kube-node']

- name: configure ad-insertion volumes
  expect:
    command: make volume
    responses:
      Are you sure you want to continue(.*): "yes"
    chdir: "{{ ad_insertion_dir }}/build"
    timeout: 15
  register: expect_output
  failed_when: "'Built target volume' not in expect_output.stdout"
  when:
    - inventory_hostname == (k8s_master)

- name: copy analytics docker image to vcac-a node
  shell: docker save ssai_analytics_{{ adi_framework }}_vcac-a | ssh root@172.32.1.1 "docker load"
  when:
    - groups['edgenode_vca_group'] is defined and inventory_hostname in groups['edgenode_vca_group']
    - (adi_platform) == "VCAC-A"
    - openness_enabled

- name: deployment adi by helm
  include: "ad-insert-helm.yml"
  when: ad_insertion_helm_enabled

- name: start ad-insertion pods
  make:
    target: start_kubernetes
    chdir: "{{ ad_insertion_dir }}/build"
  when:
    - inventory_hostname == (k8s_master)
    - not ad_insertion_helm_enabled

- name: get generated ad-insertion pod names
  k8s_info:
    kind: Pod
    namespace: "{{ ad_insertion_namespace }}"
  register: generated_pods
  when:
    - inventory_hostname == (k8s_master)

- name: wait for pod {{ podName }} to become ready
  k8s:
    kind: Pod
    name: "{{ podName }}"
    namespace: "{{ ad_insertion_namespace }}"
    wait: yes
    wait_condition:
      status: yes
      type: ContainersReady
  vars:
    podName: "{{ item.metadata.name }}"
  with_items: 
    - "{{ generated_pods.resources }}"
  when: 
    - inventory_hostname == (k8s_master)
    - podName |length > 0
    

