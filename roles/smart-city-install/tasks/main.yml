---
- name: update GatewayPorts in SSH config
  replace:
    path: "/etc/ssh/sshd_config"
    regexp: ".+(GatewayPorts).*$"
    replace: "\\1 yes"

- name: restart sshd service
  command: systemctl restart sshd

- name: clone and build Smart-City
  import_role: 
    name: smart-city-make

- name: update service-node-port-range in /etc/kubernetes/manifests/kube-apiserver.yaml
  lineinfile:
    dest: /etc/kubernetes/manifests/kube-apiserver.yaml
    regexp: '    - --service-node-port-range=(.*-)(.*)'
    line: '    - --service-node-port-range={{ smtc_service_node_port_range }}'
    state: present
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: restart kubelet service
  command: systemctl restart kubelet
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: sleep for 30 seconds to allow kubelet time to restart
  wait_for:
    timeout: 30
  delegate_to: localhost

- name: apply cloud labels to nodes based on inventory and group configuration
  import_role:
    name: k8s-labels
  vars:
    provided_labels: "{{ cloud_labels }}"
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: apply office labels to nodes based on inventory and group configuration
  import_role:
    name: k8s-labels
  vars:
    provided_labels: "{{ office_labels }}"
  when:
    - inventory_hostname == groups['kube-master'][0]
    - not openness_enabled

######################################TBD - use existing makefiles ATM##################################
#
#- name: find generated Smart-City yaml files
#  find:
#    paths: "{{ smtc_k8s_dir }}"
#    patterns: "*.yaml"
#    excludes: "self-certificates.yaml"
#  register: yaml_output
#
#- set_fact:
#    net_annotation_lines: []
#    office_db_annotation_lines: []
#    resource_header_lines: []

#- set_fact:
#    net_annotation_lines: "{{ net_annotation_lines }} + [ '{{ item }}' ]"
#  with_items:
#    - "      annotations:"
#    - "        k8s.v1.cni.cncf.io/networks: \\'["
#    - "              { \"name\": \"flannel-net\" },"
#    - "              { \"name\": \"sriov-net\" }"
#    - "        ]\\'"

#- set_fact:
#    office_db_annotation_lines: "{{ office_db_annotation_lines }} + [ '{{ item }}' ]"
#  with_items:
#    - "  annotations:"
#    - "    k8s.v1.cni.cncf.io/networks: \\'["
#    - "          { \"name\": \"flannel-net\" },"
#    - "          { \"name\": \"sriov-net\" }"
#    - "    ]\\'"

#- set_fact:
#    resource_header_lines: "{{ resource_header_lines }} + [ '{{ item }}' ]"
#  with_items:
#    - "          resources:"
#    - "            limits:"
#    - "            requests:"

#- name: Update k8s yaml files
#  include: "smtc-yaml-updates.yml"
#  loop: '{{ yaml_output.files }}'
#  loop_control:
#    loop_var: yaml_file
#  when:
#    - inventory_hostname == groups['kube-master'][0]

#- name: generate k8s ssl cert keys
#  shell: "{{ smtc_cert_dir }}/self-sign.sh"
#  args:
#    creates: self.key
#  when:
#    - inventory_hostname == groups['kube-master'][0]

#- name: create ssl certificates yaml
#  shell: 'kubectl create secret generic self-signed-certificate --from-file=self.key="{{ smtc_cert_dir }}/self.key" --from-file=self.crt="{{ smtc_cert_dir }}/self.crt" --dry-run -o yaml > "{{ smtc_k8s_dir }}/{{ smtc_ssl_cert_yaml }}"'
#  args:
#    chdir: "{{ smtc_dir }}"
#    creates: "{{ smtc_ssl_cert_yaml }}"
#  when:
#    - inventory_hostname == groups['kube-master'][0]

#- name: create Smart-City k8s ssl secrets object
#  k8s:
#    state: present
#    src: "{{ smtc_k8s_dir }}/{{ smtc_ssl_cert_yaml }}"
#    namespace: "{{ smtc_namespace }}"
#  when:
#    - inventory_hostname == groups['kube-master'][0]

#- name: create Smart-City sensor configmap
#  command: kubectl create configmap sensor-info --from-file={{ smtc_maint_dir }}/{{ smtc_sensor_info_json }} --namespace {{ smtc_namespace }}
#  register: configmap_output
#  failed_when: "'configmap/sensor-info created' not in configmap_output.stdout"
#  when:
#    - inventory_hostname == groups['kube-master'][0]

#- name: create net-attach-def object for flannel overlay network
#  k8s_raw:
#    state: present
#    definition: "{{ lookup('file', '../templates/flannel-network.yaml') | from_yaml }}"
#  when:
#    - inventory_hostname == groups['kube-master'][0]

#- name: create Smart-City k8s service pods
#  k8s:
#    state: present
#    src: "{{ item.path }}"
#    namespace: "{{ smtc_namespace }}"
#  loop: "{{ yaml_output.files|flatten(levels=1) }}"
#  when: 
#    - inventory_hostname == groups['kube-master'][0]
########################################################################################################


- name: patch docker run/exec TTY cmd line args (TEMP WORKAROUND)
  replace:
    path: "{{ smtc_dir }}/script/shell.sh"
    regexp: "(.*)-it(.*)$"
    replace: "\\1-i\\2"

# workaround for smtc v19.10.1
- name: increase vm.max_map_count
  command: sysctl -w vm.max_map_count=262144
  when:
    - not openness_enabled
    - smtc_default_version == "v19.10.1"

- name: start smart-city pods
  command: make start_kubernetes
  args:
    chdir: "{{ smtc_dir }}/build"
  when:
    - inventory_hostname == groups['kube-master'][0]
    - not openness_enabled

- name: start smart-city openness cloud pods
  command: make start_openness_cloud
  args:
    chdir: "{{ smtc_dir }}/build"
  when:
    - inventory_hostname == groups['kube-master'][0]
    - openness_enabled

- name: get generated Smart-City pod names
  command: kubectl get pods --namespace {{ smtc_namespace }}
  register: generated_pods
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: wait for pod {{ podName }} to become ready
  command: kubectl wait --for=condition=ContainersReady pod/{{ podName | first }} --timeout=5s --namespace {{ smtc_namespace }}
  register: ready_output
  retries: 12
  delay: 5
  vars:
    podName: "{{ item | regex_search('(\\S+-\\S+-\\S+)', '\\1') }}"
  until: ("condition met" in ready_output.stdout)
  with_items: 
    - "{{ generated_pods.stdout_lines }}"
  when: 
    - inventory_hostname == groups['kube-master'][0]
    - podName != ""
    - "'db-init' not in item"

