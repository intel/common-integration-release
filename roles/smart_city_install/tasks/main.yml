---
- set_fact:
    connector_host_ip: "{{ hostvars[groups['kube-master'][0]].ip }}"
    connector_host_user: "{{ hostvars[groups['kube-master'][0]].ansible_user }}"
    connector_host_password: "{{ hostvars[groups['kube-master'][0]].ansible_password }}"
  when: openness_enabled

- name: update GatewayPorts in SSH config
  replace:
    path: "/etc/ssh/sshd_config"
    regexp: ".+(GatewayPorts).*$"
    replace: "\\1 yes"

- name: restart sshd service
  service:
    name: sshd
    state: restarted

- name: clone and build Smart-City
  import_role: 
    name: smart_city_make

- name: update service-node-port-range in /etc/kubernetes/manifests/kube-apiserver.yaml
  lineinfile:
    dest: /etc/kubernetes/manifests/kube-apiserver.yaml
    regexp: '    - --service-node-port-range=(.*-)(.*)'
    line: '    - --service-node-port-range={{ smtc_service_node_port_range }}'
    state: present
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: restart kubelet service
  service:
    name: kubelet
    state: restarted
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: sleep for 30 seconds to allow kubelet time to restart
  wait_for:
    timeout: 30
  delegate_to: localhost

- name: apply cloud labels to nodes based on inventory and group configuration
  import_role:
    name: k8s_labels
  vars:
    provided_labels: "{{ cloud_labels }}"
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: apply office labels to nodes based on inventory and group configuration
  import_role:
    name: k8s_labels
  vars:
    provided_labels: "{{ office_labels }}"
  when:
    - inventory_hostname == groups['kube-master'][0]
    - not openness_enabled

- name: patch docker run/exec TTY cmd line args (TEMP WORKAROUND)
  replace:
    path: "{{ smtc_dir }}/script/shell.sh"
    regexp: "(.*)-it(.*)$"
    replace: "\\1-i\\2"
  when: disable_docker_tty

# workaround for smtc v19.10.1
- name: increase vm.max_map_count
  command: sysctl -w vm.max_map_count=262144
  when:
    - not openness_enabled
    - smtc_default_version == "v19.10.1"

- name: deployment SMTC by helm
  include: "smart-city-helm.yml"
  when:
    - smtc_helm_enabled
    - not openness_enabled

- name: start smart-city pods
  make:
    target: start_kubernetes
    chdir: "{{ smtc_dir }}/build"
  when:
    - inventory_hostname == groups['kube-master'][0]
    - not openness_enabled
    - not smtc_helm_enabled

# ---- workaround for disable tty on openness deployment ----
- name: skip host key check when tty disabled
  replace:
    path: "{{ smtc_dir }}/deployment/tunnel/create-key.sh"
    regexp: "(.*)StrictHostKeyChecking=ask(.*)$"
    replace: "\\1StrictHostKeyChecking=no\\2"
  when:
    - disable_docker_tty
    - openness_enabled

- name: Create tunnel key directory if it does not exist
  file:
    path: "{{ smtc_dir }}/deployment/tunnel/.key"
    state: directory
    mode: '0700'
  when:
    - inventory_hostname == groups['kube-master'][0]
    - disable_docker_tty
    - openness_enabled

- name: skip key generation by copy host key
  copy:
    src: "/root/.ssh/{{ item }}"
    dest: "{{ smtc_dir }}/deployment/tunnel/.key/{{ item }}"
    remote_src: yes
  with_items:
    - id_rsa
    - id_rsa.pub
  when:
    - inventory_hostname == groups['kube-master'][0]
    - disable_docker_tty
    - openness_enabled

- name: change mode of private key file
  file:
    path: "{{ smtc_dir }}/deployment/tunnel/.key/id_rsa"
    mode: '0600'
  when:
    - inventory_hostname == groups['kube-master'][0]
    - disable_docker_tty
    - openness_enabled

#--------------------------------

- name: start smart-city openness cloud pods
  expect:
    command: /bin/bash -c "SCOPE=cloud CONNECTOR_CLOUD={{ connector_host_user }}@{{ connector_host_ip }} make start_helm"
    responses:
      Are you sure you want to continue(.*): "yes"
      (.*)'s password(.*): "{{ connector_host_password }}"
    chdir: "{{ smtc_dir }}/build"
    timeout: 15
  when:
    - inventory_hostname == groups['kube-master'][0]
    - openness_enabled

- name: get generated Smart-City pod names
  k8s_info:
    kind: Pod
    namespace: "{{ smtc_namespace }}"
  register: generated_pods
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: wait for pod {{ podName }} to become ready
  k8s:
    kind: Pod
    name: "{{ podName }}"
    namespace: "{{ smtc_namespace }}"
    wait: yes
    wait_condition:
      status: yes
      type: ContainersReady
  vars:
    podName: "{{ item.metadata.name }}"
    podType: "{{ item.metadata.ownerReferences[0].kind }}"
  with_items: 
    - "{{ generated_pods.resources }}"
  when: 
    - inventory_hostname == groups['kube-master'][0]
    - podName |length > 0
    - podType != "Job"
